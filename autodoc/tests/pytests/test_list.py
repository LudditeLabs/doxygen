import pytest
from textwrap import dedent
from docutils import nodes
import visitor


# Test: list constructions.
class TestList:
    def test_bullet_layout(self):
        doc = visitor.parse(dedent("""
        A list of events:
          - mouse events
            - mouse click event
            - More info about the click event.
          - mouse double click event
            * key down event
            * key up event

        More text here.
        """))
        assert isinstance(doc, nodes.document)
        assert len(doc) == 3

        pytest.g.assert_simple_par(doc[0], 'A list of events:')
        pytest.g.assert_simple_par(doc[2], 'More text here.')
        assert isinstance(doc[1], nodes.bullet_list)

    def test_bullet_nested(self):
        doc = visitor.parse(dedent("""
        A list of events:
          - mouse events
            - mouse click event
            - More info about the click event.
          - mouse double click event
            * key down event
            * key up event

        More text here.
        """))

        assert isinstance(doc, nodes.document)
        assert len(doc) == 3

        lst = doc[1]
        assert isinstance(lst, nodes.bullet_list)
        assert len(lst) == 2
        assert lst.get('bullet') == '-'
        assert 'simple' not in lst

        # - mouse events
        item = lst[0]
        assert isinstance(item, nodes.list_item)
        assert len(item) == 2

        pytest.g.assert_simple_par(item[0], 'mouse events')

        item = item[1]
        assert isinstance(item, nodes.bullet_list)
        assert len(item) == 2
        assert 'simple' not in item

        #   - mouse click event
        node = item[0]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'mouse click event')

        #   - More info about the click event.
        node = item[1]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'More info about the click event.')

        # - mouse double click event
        item = lst[1]
        assert isinstance(item, nodes.list_item)
        assert len(item) == 2
        assert 'simple' not in item

        pytest.g.assert_simple_par(item[0], 'mouse double click event')

        item = item[1]
        assert isinstance(item, nodes.bullet_list)
        assert len(item) == 2
        assert 'simple' not in item

        #   * key down event
        node = item[0]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'key down event')

        #   * key up event
        node = item[1]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'key up event')

    # Numbered lists can be generated by using a minus followed by a hash
    # or by using a number followed by a dot.
    def test_enumerated_nested(self):
        doc = visitor.parse(dedent("""
        A list of events:
          - mouse events
            -# mouse click event
            -# More info about the click event.
          - mouse double click event
            1. key down event
            2. key up event

        More text here.
        """))

        assert isinstance(doc, nodes.document)
        assert len(doc) == 3

        lst = doc[1]
        assert isinstance(lst, nodes.bullet_list)
        assert len(lst) == 2
        assert lst.get('bullet') == '-'
        assert 'simple' not in lst

        # - mouse events
        item = lst[0]
        assert isinstance(item, nodes.list_item)
        assert len(item) == 2

        pytest.g.assert_simple_par(item[0], 'mouse events')

        item = item[1]
        assert isinstance(item, nodes.enumerated_list)
        assert len(item) == 2
        assert item.get('enumtype') == 'arabic'
        assert item.get('suffix') == '.'
        assert 'simple' not in item

        #   - mouse click event
        node = item[0]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'mouse click event')

        #   - More info about the click event.
        node = item[1]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'More info about the click event.')

        # - mouse double click event
        item = lst[1]
        assert isinstance(item, nodes.list_item)
        assert len(item) == 2

        pytest.g.assert_simple_par(item[0], 'mouse double click event')

        item = item[1]
        assert isinstance(item, nodes.enumerated_list)
        assert len(item) == 2
        assert item.get('enumtype') == 'arabic'
        assert item.get('suffix') == '.'
        assert 'simple' not in item

        #   * key down event
        node = item[0]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'key down event')

        #   * key up event
        node = item[1]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'key up event')

    def test_simple_list(self):
        doc = visitor.parse(dedent("""
        A list of alignment:
        \li AlignLeft left alignment.
        \li AlignCenter center alignment.
        \li AlignRight right alignment

        No other types of alignment are supported.
        """))

        assert isinstance(doc, nodes.document)
        assert len(doc) == 3

        lst = doc[1]
        assert isinstance(lst, nodes.bullet_list)
        assert len(lst) == 3
        assert lst.get('bullet') == '-'
        assert lst.get('simple') == '1'

        # item 1

        node = lst[0]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'AlignLeft left alignment.')

        # item 2

        node = lst[1]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'AlignCenter center alignment.')

        # item 3

        node = lst[2]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'AlignRight right alignment')

    def test_html_list(self):
        doc = visitor.parse(dedent("""
        A list of events:
        <ul>
        <li> first item
        </li>
        <li> mouse events
           <ol>
           <li>mouse move event
           <li>mouse double click event
           </ol>
        <li> keyboard events
           <ol>
           <li>key up event
           </ol>
        </ul>
        More text here.
        """))

        assert isinstance(doc, nodes.document)
        assert len(doc) == 3

        lst = doc[1]
        assert isinstance(lst, nodes.bullet_list)
        assert len(lst) == 3
        assert lst.get('bullet') == '-'
        assert 'simple' not in lst
        assert lst.get('html') == '1'

        # <li> first item

        item = lst[0]
        assert isinstance(item, nodes.list_item)
        assert len(item) == 1

        pytest.g.assert_simple_par(item[0], 'first item')

        # <li> mouse events

        item = lst[1]
        assert isinstance(item, nodes.list_item)
        assert len(item) == 2

        pytest.g.assert_simple_par(item[0], 'mouse events')

        subitem = item[1]
        assert isinstance(subitem, nodes.enumerated_list)
        assert len(subitem) == 2
        assert subitem.get('html') == '1'
        assert subitem.get('enumtype') == 'arabic'
        assert subitem.get('suffix') == '.'

        node = subitem[0]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'mouse move event')

        node = subitem[1]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'mouse double click event')

        # <li> keyboard events

        item = lst[2]
        assert isinstance(item, nodes.list_item)
        assert len(item) == 2

        pytest.g.assert_simple_par(item[0], 'keyboard events')

        subitem = item[1]
        assert isinstance(subitem, nodes.enumerated_list)
        assert len(subitem) == 1
        assert subitem.get('html') == '1'
        assert subitem.get('enumtype') == 'arabic'
        assert subitem.get('suffix') == '.'

        node = subitem[0]
        assert isinstance(node, nodes.list_item)
        assert len(node) == 1
        pytest.g.assert_simple_par(node[0], 'key up event')
